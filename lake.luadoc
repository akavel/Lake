--[[------
Lake - a build framework in Lua

Freely distributable for any purpose, as long as copyright notice is retained. (X11/MIT)
(And remember my dog did not eat your homework)
Steve Donovan, 2007-2013

    Lake version 1.4  A Lua-based Build Engine
      lake <__flags__> <__assigments__> <__target(s)__>
      __flags__:
        -v verbose
        -t test (show but don't execute commands)
        -n don't synthesize target
        -d initial directory
        -b basic print (don't show full commands)
        -s don't compile strictly
        -g debug build  (also DEBUG=1)
        -j N run jobs in parallel where possible. (requires winapi or luaposix)
        -f FILE read a named lakefile
        -e EXPR evaluate a lakefile expression
        -l FILE build a shared library/DLL
        -lua FILE build a Lua C extension
        -p FILE build a program
        -w write out unsatisfied needs to lakeconfig.lua
        -lua FILE build a Lua binary extension
        -install FILE install a new need or language
        -C really clean a directory tree!

      __assignments__: arguments of the form VAR=STRING assign the string
        to the global VAR. The env variable LAKE_PARMS may contain
        extra assignments, which occur before any other configuration file is loaded.

      __target(s)__: any targets of the lakefile; if a file with a recognized
        extension, build and run, passing any remaining arguments, unless -n
        is specified. Lua scripts are run directly using Lake and have access
        to all defined libraries.

    Without target arguments, use a file called 'lakefile' or 'lakefile.lua'

__configuration__: loads '~/.lake/config.lua' and './lakeconfig.lua' if it exists.
Will then load `LAKE_CONFIG_FILE` if defined. `require` path is extended to
also start at `~/.lake`. Plugins are loaded into this module path:

  * `lake.lang.FOO` defines a new language `FOO`
  * `lake.needs.BOO` defines a new need `BOO`

Installing a language plugin causes it to be required from `~/.lake/config.lua`; needs plugins
are loaded when resolving unknown needs.


@script lake
]]

--------------
-- Globals understood by Lake
configuration_globals = {
    --These can be set on the command-line (like make) and in the environment variable LAKE_PARMS
    LAKE_CONFIG_FILE=true, -- extra configuration file
    CC=true, -- the C compiler (gcc unless cl is available)
    CXX=true, -- the C++ compiler (g++ unless cl is available)
    OPTIMIZE=true, -- (O2)
    STRICT=true, -- don't compile strictly (also -s command-line flag)
    DEBUG=true, -- debug build (also -g command-line flag)
    PREFIX=true, -- (empty string). e.g. PREFIX=arm-linux makes CC become arm-linux-gcc etc
    NEEDS=true, -- (nil) any additional needs for the build
    M32=true, -- (false) do a 32-bit build on 64-bit platform if possible
    FULL_OUTPUTNAME=true, (false) build a unique output name for targets from their name and dir
    LUA_INCLUDE_DIR=true, (deduced) Lua include directory for 'lua' need
    IGNORE_LUAROCKS=true, (false) don't use Lua configuration from luarocks if installed.
    LUA_LIB_DIR=true, -- (deduced) Lua library directory
    WINDOWS=true, -- true for Windows builds
    BUILD_PLAT=true, -- build platform deduced from `uname` if not windows, 'Windows' otherwise
    PLAT=true, -- actual target platform, usually the same as `BUILD_PLAT`
    MSVC=true, -- true if we're using cl.exe
    COMBINE=true, -- allow the compiler to compile multiple files at once (if it is capable)
    NODEPS=true, -- don't do automatic dependency generation or checking
    REMOTE_LAKE_URL=true, --(http://stevedonovan.github.com/files) Default download location for 'get:'
    NEW_HOME=true, -- (nil) overrides default for `path.expanduser` '~'
    _DEBUG=true, (false) don't suppress Lua stack trace - useful for debugging Lake.
}

----------
-- Globals provided by Lake
globals = {
    PWD=true, -- current working directory
    LOCAL_EXEC=true, -- how to execute local programs (is ./ on Unix)
    EXE_EXT=true, --  extension of programs on this platform
    DLL_EXT=true, -- extension of shared libraries on this platform
    DIRSEP=true, -- directory separator on this platform
}

